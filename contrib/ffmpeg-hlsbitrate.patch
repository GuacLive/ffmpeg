From e04e08433edd38029b58f2bd562f4d4d312e9906 Mon Sep 17 00:00:00 2001
From: Ingo Oppermann <ingo@datarhei.com>
Date: Wed, 13 Jul 2022 15:00:40 +0200
Subject: [PATCH v1] Calculate-bandwidth-estimate (ffmpeg 4.4)

---
 libavformat/hlsenc.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/libavformat/hlsenc.c b/libavformat/hlsenc.c
index 7d97ce1..a78a143 100644
--- a/libavformat/hlsenc.c
+++ b/libavformat/hlsenc.c
@@ -124,6 +124,7 @@ typedef struct VariantStream {
     AVIOContext *out;
     AVIOContext *out_single_file;
     int packets_written;
+    uint64_t bytes_written;
     int init_range_length;
     uint8_t *temp_buffer;
     uint8_t *init_buffer;
@@ -138,6 +139,8 @@ typedef struct VariantStream {
     double dpp;           // duration per packet
     int64_t start_pts;
     int64_t end_pts;
+    int64_t scaled_start_pts;
+    int64_t scaled_cur_pts;
     int64_t video_lastpos;
     int64_t video_keyframe_pos;
     int64_t video_keyframe_size;
@@ -1490,6 +1493,16 @@ static int create_master_playlist(AVFormatContext *s,
             bandwidth += get_stream_bit_rate(vid_st);
         if (aud_st)
             bandwidth += get_stream_bit_rate(aud_st);
+
+        if (bandwidth == 0) {
+            // Estimate bandwidth
+            bandwidth = (int)round((double)vs->bytes_written / (av_q2d(AV_TIME_BASE_Q) * (vs->scaled_cur_pts - vs->scaled_start_pts)) * 8);
+
+            // Reset counters
+            vs->bytes_written = 0;
+            vs->scaled_start_pts = vs->scaled_cur_pts;
+        }
+
         bandwidth += bandwidth / 10;
 
         ccgroup = NULL;
@@ -2454,6 +2467,19 @@ static int hls_write_packet(AVFormatContext *s, AVPacket *pkt)
         return AVERROR(ENOMEM);
     }
 
+    if (vs->scaled_start_pts == AV_NOPTS_VALUE) {
+        vs->scaled_start_pts = av_rescale_q(pkt->pts, st->time_base, AV_TIME_BASE_Q);
+    }
+
+    if (vs->scaled_cur_pts == AV_NOPTS_VALUE) {
+        vs->scaled_cur_pts = av_rescale_q(pkt->pts, st->time_base, AV_TIME_BASE_Q);
+    } else {
+        int64_t pts = av_rescale_q(pkt->pts, st->time_base, AV_TIME_BASE_Q);
+        if (pts > vs->scaled_cur_pts) {
+            vs->scaled_cur_pts = pts;
+        }
+    }
+
     end_pts = hls->recording_time * vs->number;
 
     if (vs->sequence - vs->nb_entries > hls->start_sequence && hls->init_time > 0) {
@@ -2671,6 +2697,7 @@ static int hls_write_packet(AVFormatContext *s, AVPacket *pkt)
     }
 
     vs->packets_written++;
+    vs->bytes_written += (uint64_t)pkt->size;
     if (oc->pb) {
         int64_t keyframe_pre_pos = avio_tell(oc->pb);
         ret = ff_write_chained(oc, stream_index, pkt, s, 0);
@@ -2965,6 +2992,8 @@ static int hls_init(AVFormatContext *s)
         vs->sequence  = hls->start_sequence;
         vs->start_pts = AV_NOPTS_VALUE;
         vs->end_pts   = AV_NOPTS_VALUE;
+        vs->scaled_start_pts = AV_NOPTS_VALUE;
+        vs->scaled_cur_pts = AV_NOPTS_VALUE;
         vs->current_segment_final_filename_fmt[0] = '\0';
         vs->initial_prog_date_time = initial_program_date_time;
 

base-commit: 1eb6abbfe4df41f4718634cfda1f5fb0b10dc0ba
-- 
2.32.1 (Apple Git-133)

